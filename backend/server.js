// file: server.js
import dotenv from 'dotenv';
import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import passport from 'passport'; // <<<< KH√îI PH·ª§C L·∫†I
import initializePassport from './config/passportConfig.js'; // <<<< KH√îI PH·ª§C L·∫†I

// Import Routes
import essayRoutes from './routes/essayRoutes.js';
import topicRoutes from './routes/topicRoutes.js';
import categoryRoutes from './routes/categoryRoutes.js';
import authRoutes from './routes/authRoutes.js'; // <<<< KH√îI PH·ª§C L·∫†I
import subscriptionRoutes from './routes/subscriptionRoutes.js'; // <<<< KH√îI PH·ª§C L·∫†I

// Cloudinary - B·∫°n c√≥ th·ªÉ gi·ªØ l·∫°i n·∫øu c·∫ßn c·∫•u h√¨nh global ho·∫∑c ƒë√£ lo·∫°i b·ªè n·∫øu ch·ªâ d√πng trong routes
import { v2 as cloudinary } from 'cloudinary'; // <<<< KH√îI PH·ª§C L·∫†I (n·∫øu c·∫ßn thi·∫øt ·ªü ƒë√¢y)

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5050;

// C·∫•u h√¨nh Cloudinary (n·∫øu b·∫°n c·∫ßn c·∫•u h√¨nh ·ªü ƒë√¢y thay v√¨ trong c√°c file route ri√™ng l·∫ª)
// ƒê·∫£m b·∫£o c√°c bi·∫øn m√¥i tr∆∞·ªùng CLOUDINARY_CLOUD_NAME, CLOUDINARY_API_KEY, CLOUDINARY_API_SECRET ƒë√£ ƒë∆∞·ª£c set trong .env
if (process.env.CLOUDINARY_URL || (process.env.CLOUDINARY_CLOUD_NAME && process.env.CLOUDINARY_API_KEY && process.env.CLOUDINARY_API_SECRET)) {
  cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET,
    secure: true, // S·ª≠ d·ª•ng https
  });
  console.log("‚úÖ Cloudinary configured via server.js");
} else {
  console.warn("‚ö†Ô∏è Cloudinary configuration not found in .env. Uploads might fail if not configured elsewhere.");
}


// C·∫•u h√¨nh CORS
const allowedOrigins = [
  process.env.FRONTEND_URL || 'http://localhost:8080', // Ho·∫∑c port c·ªßa React dev server c·ªßa b·∫°n (3000, 5173, etc.)
  'https://essay-web-1.onrender.com',
  'https://vercel.com/tonys-projects-fa0649a2/essay-web'
  // Th√™m c√°c origin kh√°c n·∫øu c·∫ßn
];
const corsOptions = {
  origin: function (origin, callback) {
    if (!origin && process.env.NODE_ENV !== 'production') { // Cho ph√©p request kh√¥ng c√≥ origin (Postman, mobile apps) trong dev
        return callback(null, true);
    }
    if (allowedOrigins.some(allowed => origin && origin.startsWith(allowed))) {
      callback(null, true);
    } else {
      console.error('Blocked by CORS:', origin);
      callback(new Error('Not allowed by CORS'));
    }
  },
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
};

app.use(cors(corsOptions));

// Middlewares c∆° b·∫£n
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Kh·ªüi t·∫°o v√† c·∫•u h√¨nh Passport <<<< KH√îI PH·ª§C L·∫†I
app.use(passport.initialize());
initializePassport(passport);

// K·∫øt n·ªëi MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("‚úÖ MongoDB Atlas connected successfully"))
  .catch(error => console.error("‚ùå MongoDB Atlas connection error:", error.message));

// ƒê·ªãnh tuy·∫øn (API Routes)
app.use('/api/auth', authRoutes);                   // <<<< KH√îI PH·ª§C L·∫†I
app.use('/api/subscriptions', subscriptionRoutes);  // <<<< KH√îI PH·ª§C L·∫†I
app.use('/api/essays', essayRoutes);
app.use('/api/topics', topicRoutes);
app.use('/api/categories', categoryRoutes);

// Route c∆° b·∫£n ƒë·ªÉ ki·ªÉm tra server
app.get('/', (req, res) => {
  res.send('Essay Web API is running with Authentication! üöÄ');
});

app.listen(PORT, () => {
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
});