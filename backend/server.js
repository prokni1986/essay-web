// file: server.js
import dotenv from 'dotenv';
import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import passport from 'passport';
import initializePassport from './config/passportConfig.js';

// Import Routes
import essayRoutes from './routes/essayRoutes.js';
import topicRoutes from './routes/topicRoutes.js';
import categoryRoutes from './routes/categoryRoutes.js';
import authRoutes from './routes/authRoutes.js';
import subscriptionRoutes from './routes/subscriptionRoutes.js';
import adminRoutes from './routes/adminRoutes.js'; // TH√äM M·ªöI
import { v2 as cloudinary } from 'cloudinary';
import examRoutes from './routes/examRoutes.js'; // <<<< B·∫±ng d√≤ng n√†y
import newsRoutes from './routes/newsRoutes.js'
import tagRoutes from './routes/tagRoutes.js';
import noticeRoutes from './routes/noticeRoutes.js';
dotenv.config();

const app = express();
const PORT = process.env.PORT || 5050;

// C·∫•u h√¨nh Cloudinary (n·∫øu b·∫°n c·∫ßn c·∫•u h√¨nh ·ªü ƒë√¢y)
if (process.env.CLOUDINARY_URL || (process.env.CLOUDINARY_CLOUD_NAME && process.env.CLOUDINARY_API_KEY && process.env.CLOUDINARY_API_SECRET)) {
  cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET,
    secure: true,
  });
  console.log("‚úÖ Cloudinary configured via server.js");
} else {
  console.warn("‚ö†Ô∏è Cloudinary configuration not found in .env. Uploads might fail if not configured elsewhere.");
}

// C·∫•u h√¨nh CORS
const allowedOrigins = [
  process.env.FRONTEND_URL_VERCEL, // <<<< Bi·∫øn m√¥i tr∆∞·ªùng cho URL Vercel c·ªßa b·∫°n
  process.env.FRONTEND_URL_LOCAL || 'http://localhost:8080', // Ho·∫∑c port local dev c·ªßa b·∫°n (v√≠ d·ª• 3000, 8080)
  'https://essay-web-1.onrender.com',
  'https://essay-web-neon.vercel.app',
  
].filter(Boolean); // Lo·∫°i b·ªè c√°c gi√° tr·ªã undefined/null

console.log("Allowed Origins for CORS:", allowedOrigins); // Log ra ƒë·ªÉ ki·ªÉm tra

const corsOptions = {
  origin: function (origin, callback) {
    // N·∫øu kh√¥ng c√≥ origin (v√≠ d·ª•: Postman trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p, ho·∫∑c server-to-server)
    // ho·∫∑c n·∫øu origin n·∫±m trong danh s√°ch cho ph√©p.
    // Trong production, b·∫°n c√≥ th·ªÉ mu·ªën ch·∫∑t ch·∫Ω h∆°n v·ªõi vi·ªác !origin
    if (!origin || allowedOrigins.includes(origin)) {
      // console.log(`Allowing origin: ${origin}`); // B·∫≠t log n√†y n·∫øu c·∫ßn debug k·ªπ
      callback(null, true);
    } else {
      console.error(`Blocked by CORS. Origin: ${origin}. Allowed origins:`, allowedOrigins);
      callback(new Error('Not allowed by CORS'));
    }
  },
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
};

app.use(cors(corsOptions));

// Middlewares c∆° b·∫£n
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Kh·ªüi t·∫°o v√† c·∫•u h√¨nh Passport
app.use(passport.initialize());
initializePassport(passport);

// K·∫øt n·ªëi MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("‚úÖ MongoDB Atlas connected successfully"))
  .catch(error => console.error("‚ùå MongoDB Atlas connection error:", error.message));

// ƒê·ªãnh tuy·∫øn (API Routes)
app.use('/api/auth', authRoutes);
app.use('/api/subscriptions', subscriptionRoutes);
app.use('/api/essays', essayRoutes);
app.use('/api/topics', topicRoutes);
app.use('/api/categories', categoryRoutes);
app.use('/api/admin', adminRoutes); // <<<< TH√äM M·ªöI
app.use('/api/exams', examRoutes);
app.use('/api/news', newsRoutes);
app.use('/api/tags', tagRoutes);
app.use('/api/notices', noticeRoutes);
// Route c∆° b·∫£n ƒë·ªÉ ki·ªÉm tra server
app.get('/', (req, res) => {
  res.send('Essay Web API is running with Authentication! üöÄ');
});

app.listen(PORT, () => {
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
});